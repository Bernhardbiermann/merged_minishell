/******************  	MINISHELL PROJECT  		********************/
/*	recreate a shell, similar to bash (use bash -posix for reference?)

1. open a window with a prompt to input command-lines
2. take the user's input and parse it to different grammatical elements
3. trigger commands execution

1. OPEN WINDOW WITH A PROMPT 

2. PARSE 
	2.1. lexer (lexical analyzer): recognize each elements
	2.2. parse and store in a struct? Break the input into tokens (words (cmds and args), operators (incl pipes))
	2.3. expand the vars that need expanding, trim what's not useful
note: pass on the char **envp as a linked-list in all functions, making it easier to append or to remove elements
BUT: does it work with the execve() function for instance?
	2.4  Pass the result of the parsing to execution

3. EXECUTION
	3.1. Take the parsed input, filter between (exec_cmd()):
		if only one cmd, execute it 
		if 2+ cmds, trigger the pipes 
		3.1.1. If one cmd (exec_one_cmd()):
			if function is a builtin, exec the builtin (builtins_functions())
			if it's an external function: find valid path, execute cmd
		3.1.2. If more cmds (exec_more_cmds()): pipe process: 
			create pipes
			for each pipe/cmd of nb_cmds: 
				fork, 
				dup2, (pass on from one pipe end to the other)
				close pipes, 
				exec cmd, 
				check errors										  */
/**********************************************************************/


/******************  			TASKS  				********************/
/*	* window/shell + prompt: function read_line + PROMPT defined as a macro
	* export outputs through the whole project to check what we're doing and check for errors
	* what do we put in our struct?
		array of arrays or linked list of the parse elements
		pipes
		envp or myenvp var
		nb of commands (calculated at parsing level or after parsing)
	* figure out signals and CTRL+C, CTRL+\ and CTRL+Z
	* figure out here_docs and double redirection << >>
	* finish/ correct the implementations of builtins (specially in linked-list used)
	* figure out what the working history of the shell is about
/**********************************************************************/



/******************  		SUBJECT (for reference)  			********************/
/* Your shell should:
• Display a prompt when waiting for a new command.
• Have a working history.
• Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).
• Avoid using more than one global variable to indicate a received signal. Consider
the implications: this approach ensures that your signal handler will not access your
main data structures.
• Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).
• Handle ’ (single quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence.
• Handle " (double quote) which should prevent the shell from interpreting the meta-
characters in the quoted sequence except for $ (dollar sign).
• Implement redirections:
◦ < should redirect input.
◦ > should redirect output.
◦ << should be given a delimiter, then read the input until a line containing the
delimiter is seen. However, it doesn’t have to update the history!
◦ >> should redirect output in append mode.
• Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.
• Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
• Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.
• Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
• In interactive mode:
◦ ctrl-C displays a new prompt on a new line.
◦ ctrl-D exits the shell.
◦ ctrl-\ does nothing.
• Your shell must implement the following builtins:
◦ echo with option -n
◦ cd with only a relative or absolute path
◦ pwd with no options
◦ export with no options
◦ unset with no options
◦ env with no options or arguments
◦ exit with no options
The readline() function can cause memory leaks. You don’t have to fix them. But
that doesn’t mean your own code, yes the code you wrote, can have memory
leaks.
/**********************************************************************/


